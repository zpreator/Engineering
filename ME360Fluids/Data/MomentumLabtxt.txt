import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

def GetData():
    data = np.loadtxt(u"C:/Repos/Engineering/ME360Fluids/MomentumData2.txt", unpack=True)
    return data
    
def Theoretical(vDot, Dn, theta):
    P = 85 #Kpa
    R = 0.287
    T = 293 #K
    rho = P/(R*T)
    theta = theta/360*(2*np.pi) #Degrees to radians
    return rho*vDot**2*4/(Dn**2*np.pi)*(1-np.cos(theta))

def Uncertainty(std):
    u = [np.sqrt(0.01**2+(2*i)**2) for i in std]
    return u

def PowerCurve(x, a, b):
    """ Is used for the curve_fit function in 'PowerCurveFitScipy'"""
    return a*x**b

def RemoveNanValues(x, y):
    for i in range(len(x)):
        val = y[i]
        if np.isnan(y[i]):
            x[i] = 'nan'
        elif x[i] == 'nan':
            y[i] = 'nan'
    x = x[np.logical_not(np.isnan(x))]
    y = y[np.logical_not(np.isnan(y))]
    return x, y

def PowerCurveFitScipy(x, y):
    """ Computes the power law curve fit for the data"""
    popt, pcov = curve_fit(PowerCurve, x, y)
    residuals = y-PowerCurve(x, popt[0], popt[1])
    ss_res = np.sum(residuals**2)
    ss_tot = np.sum((x-np.mean(x))**2)
    r_squared = 1 - (ss_res / ss_tot)
    # return [popt[0], popt[1], r_squared]
    return popt[0], popt[1]

def display(datas):
    # Volumetric flow rate
    vFlow = datas[0]
    angles = [r'$47.7$ degrees', r'$90$ degrees', r'$180$ degrees']
    shapes = ['^', 'o', 's']
    for j in range(0,len(datas[0]),5):
        g = 0
        plt.figure(figsize=(5,3.75)) #set the figure size (width,height)(inches)
        plt.tight_layout()
        for i in range(1, 6, 2):
            
            plt.rc('font', family='serif', size=10)
            #plt.rc('text', usetex=True)  #render text output with LaTeX

            # Force detected
            tData = vFlow[j:j+5]
            sData = datas[i][j:j+5]
            tData = np.array([float('nan') if x==0 else x for x in tData])
            sData = np.array([float('nan') if x==0 else x for x in sData])
            uData = Uncertainty(datas[i+1][j:j+5])

            t = np.arange(min(tData), max(tData), 0.01)
            tDat, sDat = RemoveNanValues(tData, sData)
            a, b = PowerCurveFitScipy(tDat, sDat)
            s = PowerCurve(t, a, b)
            print(b)
            # Tight layout
            plt.xlabel(r'Flow Rate $(L/min)$')
            plt.ylabel(r'Force $(N)$')
            plt.plot(t,s,'-.',label=angles[g])
            plt.errorbar(tData,sData,yerr=uData,fmt=shapes[g],capsize=5)
            g += 1
        plt.legend(loc='best')
        
        # plt.show()
        plt.savefig('plot{0:1d}.pdf'.format(j))


    # Example descrete data
    # tData = np.linspace(0,1,num=20,endpoint=True)

    # # Power Law curve
    # sData = np.cos(4 * np.pi * tData) + 2+np.random.random(len(tData))/10

    # # Momentum Error
    # uData = Uncertainty()

    # # Make the plot
    # plt.figure(figsize=(5,3)) #set the figure size (width,height)(inches)
    # plt.plot(t,s,'-.',label='Modeled values')
    # plt.errorbar(tData,sData,yerr=uData,fmt='o',capsize=5,label='Mesured Values')

    # plt.xlabel('Time (s)')
    # plt.ylabel('Voltage (mV)')
    # #plt.xlabel(r'Time ($s$)')
    # #plt.ylabel(r'Voltage ($mV$)')
    # plt.legend(loc='lower right')
    # #plt.grid()
    # plt.tight_layout()
    # #plt.subplots_adjust(bottom=0.16, top=0.95, left=0.12, right=0.96) #for manual control of plot area
    # plt.show()
    # plt.savefig('goodPlot.pdf',format='pdf')

def main():
    datas = GetData()
    display(datas)

main()